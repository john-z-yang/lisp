(define const 5)
(define adder (lambda (x) (lambda (y) (+ x (+ y const)))))
(define addSix (adder 1))
(addSix 7)
(set! const 10)
(addSix 7)
(define get (lambda (x) (lambda () x)))
(define getOne (get 1))
(getOne)
(define x 2)
(getOne)
((lambda () (+ (+ 1 2) (+ 3 4))))
((lambda () 1))
((lambda () ()))
(define twice (lambda (x) (* 2 x)))
(twice 5)
(define repeat (lambda (f) (lambda (x) (f (f x)))))
((repeat twice) 10)
((repeat (repeat twice)) 10)
((repeat (repeat (repeat twice))) 10)
((repeat (repeat (repeat (repeat twice)))) 10)
(quit)
