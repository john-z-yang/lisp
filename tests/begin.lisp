
(begin (display 1)
       (newline)
       (define x 0)
       (display 2)
       (newline)
       (define y 1)
       (display x)
       (newline)
       (display y)
       (newline)
       (define l (list x y))
       (list x y)
       (list x y))

(display x)
(newline)
(display y)
(newline)
(display l)
(newline)

(begin (begin
         (display 1)
         (newline)
         (set! x 1)
         (display 2)
         (newline)
         (set! y 2)
         (display x)
         (newline)
         (display y)
         (newline)
         (set! l (list x y))
         (list x y)
         (list x y)))

(display x)
(newline)
(display y)
(newline)
(display l)
(newline)

(display (list
          (begin (+ 1 (+ 2 (+ 3 (+ 4 (+ 5 6)))))
                 y
                 x)
          (begin (begin (+ 1 (+ 2 (+ 3 (+ 4 (+ 5 6)))))
                        x
                        y))
          (begin (begin (begin (+ 1 (+ 2 (+ 3 (+ 4 (+ 5 6)))))
                               x
                               0)))))
(newline)

(display (begin))
(newline)
(display (begin (begin) (begin) (begin)))
(newline)
(display (begin (begin (begin)) (begin (begin)) (begin (begin))))
(newline)

(begin (begin
         (begin (begin (begin)) (begin (begin)) (begin (begin)))
         (begin (display (begin (begin (begin)) (begin (begin)) (begin (begin 1))))

                (newline))
         (begin (begin (begin)) (begin (begin)) (begin (begin)))
         (begin (set! x (begin (begin (begin)) (begin (begin)) (begin (begin 1)))))
         (begin (begin (begin)) (begin (begin)) (begin (begin)))
         (begin (display (begin (begin (begin)) (begin (begin)) (begin (begin 2))))
                (newline))
         (begin (begin (begin)) (begin (begin)) (begin (begin)))
         (begin (set! y (begin (begin (begin)) (begin (begin)) (begin (begin 2)))))
         (begin (begin (begin)) (begin (begin)) (begin (begin)))
         (begin (display (begin (begin (begin)) (begin (begin)) (begin (begin x))))
                (newline))
         (begin (begin (begin)) (begin (begin)) (begin (begin)))
         (begin (display (begin (begin (begin)) (begin (begin)) (begin (begin y))))
                (newline))
         (begin (begin (begin)) (begin (begin)) (begin (begin)))
         (begin (set! l (begin (begin (begin)) (begin (begin)) (begin (begin (list x y))))))
         (begin (begin (begin)) (begin (begin)) (begin (begin)))
         (begin (begin (begin)) (begin (begin)) (begin (begin (list x y))))
         (begin (begin (begin)) (begin (begin)) (begin (begin)))
         (begin (begin (begin)) (begin (begin)) (begin (begin (list x y))))
         (begin (begin (begin)) (begin (begin)) (begin (begin)))))

(display x)
(newline)
(display y)
(newline)
(display l)
(newline)

(display
 ((((lambda (x)
      (begin (display 1)
             (newline)
             (set! x (+ x 1))
             (define a 1)
             (set! x (- x 1))
             (display 2)
             (newline)
             (set! x (+ x 1))
             (lambda (y)
               (begin (set! x (- x 1))
                      (set! y (- y 1))
                      (define b 3)
                      (display 3)
                      (newline)
                      (set! x (+ x 1))
                      (set! y (+ y 1))
                      (define c 5)
                      (set! x (- x 1))
                      (set! y (- y 1))
                      (lambda (z)
                        (begin (display 4)
                               (newline)
                               (set! x (- x 1))
                               (set! y (- y 1))
                               (set! z (- z 1))
                               (define d 7)
                               (display 5)
                               (newline)
                               (define fun1
                                 (lambda ()
                                   (begin (display (list 1 1 1 x y z))
                                          (newline)
                                          (set! x (- x 1))
                                          (set! y (- y 1))
                                          (set! z (- z 1))
                                          (display (list 1 1 1 x y z)) (newline) )))
                               (display (list x y z))
                               (newline)
                               (set! x (- x 1))
                               (set! y (- y 1))
                               (set! z (- z 1))
                               (list x y z)
                               (list)
                               (define fun2
                                 (lambda ()
                                   (begin (display (list 2 2 2 x y z))
                                          (newline)
                                          (set! x (- x 1))
                                          (set! y (- y 1))
                                          (set! z (- z 1))
                                          (display (list 2 2 2 x y z)) (newline))))
                               (fun1)
                               (fun2)
                               (set! x (- x 1))
                               (set! y (- y 1))
                               (set! z (- z 1))
                               (fun1)
                               (fun2)
                               (set! x a)
                               (set! y b)
                               (set! z c)
                               (fun1)
                               (fun2)
                               (+ x y z)))))))
    1) 3) 5))

(newline)
(display
 ((((lambda (x)
      (display 1)
      (newline)
      (set! x (+ x 1))
      (define a 1)
      (set! x (- x 1))
      (display 2)
      (newline)
      (set! x (+ x 1))
      (lambda (y)
        (set! x (- x 1))
        (set! y (- y 1))
        (define b 3)
        (display 3)
        (newline)
        (set! x (+ x 1))
        (set! y (+ y 1))
        (define c 5)
        (set! x (- x 1))
        (set! y (- y 1))
        (lambda (z)
          (display 4)
          (newline)
          (set! x (- x 1))
          (set! y (- y 1))
          (set! z (- z 1))
          (define d 7)
          (display 5)
          (newline)
          (define fun1
            (lambda ()
              (display (list 1 1 1 x y z))
              (newline)
              (set! x (- x 1))
              (set! y (- y 1))
              (set! z (- z 1))
              (display (list 1 1 1 x y z))
              (newline)))
          (display (list x y z))
          (newline)
          (set! x (- x 1))
          (set! y (- y 1))
          (set! z (- z 1))
          (list x y z)
          (list)
          (define fun2
            (lambda ()
              (display (list 2 2 2 x y z))
              (newline)
              (set! x (- x 1))
              (set! y (- y 1))
              (set! z (- z 1))
              (display (list 2 2 2 x y z)) (newline)))
          (fun1)
          (fun2)
          (set! x (- x 1))
          (set! y (- y 1))
          (set! z (- z 1))
          (fun1)
          (fun2)
          (set! x a)
          (set! y b)
          (set! z c)
          (fun1)
          (fun2)
          (+ x y z))))
    1) 3) 5))
(newline)
