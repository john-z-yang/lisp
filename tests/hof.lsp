(define const 5)
(define adder (lambda (x) (lambda (y) (+ x (+ y const)))))
(define addSix (adder 1))
(display (addSix 7))
(set! const 10)
(display (addSix 7))
(define get (lambda (x) (lambda () x)))
(define getOne (get 1))
(display (getOne))
(define x 2)
(display (getOne))
(display ((lambda () (+ (+ 1 2) (+ 3 4)))))
(display ((lambda () 1)))
(display ((lambda () ())))
(define twice (lambda (x) (* 2 x)))
(display (twice 5))
(define repeat (lambda (f) (lambda (x) (f (f x)))))
(display ((repeat twice) 10))
(display ((repeat (repeat twice)) 10))
(display ((repeat (repeat (repeat twice))) 10))
(display ((repeat (repeat (repeat (repeat twice)))) 10))
